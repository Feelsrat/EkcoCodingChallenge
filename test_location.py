import unittest
from unittest.mock import patch, Mock, call
from location import Location
from location import printdict as pd
import json


class TestLocation(unittest.TestCase):

    #   Object Creation:
    def test_object_creation(self):
        location = Location()
        self.assertIsInstance(location, Location)

    #   Error Handling with testerror method:
    def test_error_status_200(self):
        location = Location()
        responsemock = Mock()
        responsemock.status_code = 200

        self.assertTrue(location.testerror(responsemock))

    def test_error_status_403(self):
        with self.assertRaises(Exception):
            location = Location()
            responsemock = Mock()
            responsemock.status_code = 403
            location.testerror(responsemock)

    def test_error_status_999(self):
        with self.assertRaises(Exception):
            location = Location()
            responsemock = Mock()
            responsemock.status_code = 999
            location.testerror(responsemock)

    #   Error Handling with testerrorin200 method (e.g. If API responds with 200 there might still be errors)
    def test_error_code_006(self):
        with self.assertRaises(Exception):
            location = Location()
            responsemock = Mock()
            responsemock['error']['code'] = '006'
            location.testerrorin200(responsemock)

    def test_error_code_018(self):
        with self.assertRaises(Exception):
            location = Location()
            responsemock = Mock()
            responsemock['error']['code'] = '018'
            location.testerrorin200(responsemock)

    def test_error_code_abc(self):
        with self.assertRaises(Exception):
            location = Location()
            responsemock = Mock()
            responsemock['error']['code'] = 'abc'
            location.testerrorin200(responsemock)

    # Test setting location with valid string, error handling happens before this step so assumption is that json is
    # valid to enter this method.
    def test_set_location(self):
        jsondump = '{   "standard" : {      "addresst" : {},      "city" : "Dublin",      "prov" : "IE",      ' \
                   '"countryname" : "Ireland",      "postal" : {},      "confidence" : "0.90"   },   ' \
                   '"longt" : "-6.25415",   "alt" : {      "loc" : [         {            "longt" : ' \
                   '"-6.2640252173913",            "prov" : "Leinster",            "city" : "Dublin",            ' \
                   '"postal" : "D01C953",            "score" : "23",            "latt" : "53.345237826087"         }, ' \
                   '        {            "longt" : "-6.26403",            "prov" : "IE",            ' \
                   '"city" : "Dublin",            "countryname" : "Ireland",            "postal" : "D01C953",         ' \
                   '   "region" : {},            "latt" : "53.34524"         }      ]   },   "elevation" : {},   ' \
                   '"latt" : "53.32306"} '
        jsonObj = json.loads(jsondump)
        location = Location()

        location.setlocation(jsonObj)

        self.assertEqual(location.latitude, "53.32306")
        self.assertEqual(location.longitude, "-6.25415")
        self.assertEqual(location.location, "Dublin")

    #   test getforecast method
    def test_get_forecast(self):
        jsondump = '{"hourly_units":{"time":"iso8601","temperature_2m":"°C"},"latitude":53.3125,"longitude":-6.25,' \
                   '"generationtime_ms":1.623988151550293,"hourly":{"time":["2022-03-12T00:00","2022-03-12T01:00",' \
                   '"2022-03-12T02:00","2022-03-12T03:00","2022-03-12T04:00","2022-03-12T05:00","2022-03-12T06:00",' \
                   '"2022-03-12T07:00","2022-03-12T08:00","2022-03-12T09:00","2022-03-12T10:00","2022-03-12T11:00",' \
                   '"2022-03-12T12:00","2022-03-12T13:00","2022-03-12T14:00","2022-03-12T15:00","2022-03-12T16:00",' \
                   '"2022-03-12T17:00","2022-03-12T18:00","2022-03-12T19:00","2022-03-12T20:00","2022-03-12T21:00",' \
                   '"2022-03-12T22:00","2022-03-12T23:00","2022-03-13T00:00","2022-03-13T01:00","2022-03-13T02:00",' \
                   '"2022-03-13T03:00","2022-03-13T04:00","2022-03-13T05:00","2022-03-13T06:00","2022-03-13T07:00",' \
                   '"2022-03-13T08:00","2022-03-13T09:00","2022-03-13T10:00","2022-03-13T11:00","2022-03-13T12:00",' \
                   '"2022-03-13T13:00","2022-03-13T14:00","2022-03-13T15:00","2022-03-13T16:00","2022-03-13T17:00",' \
                   '"2022-03-13T18:00","2022-03-13T19:00","2022-03-13T20:00","2022-03-13T21:00","2022-03-13T22:00",' \
                   '"2022-03-13T23:00","2022-03-14T00:00","2022-03-14T01:00","2022-03-14T02:00","2022-03-14T03:00",' \
                   '"2022-03-14T04:00","2022-03-14T05:00","2022-03-14T06:00","2022-03-14T07:00","2022-03-14T08:00",' \
                   '"2022-03-14T09:00","2022-03-14T10:00","2022-03-14T11:00","2022-03-14T12:00","2022-03-14T13:00",' \
                   '"2022-03-14T14:00","2022-03-14T15:00","2022-03-14T16:00","2022-03-14T17:00","2022-03-14T18:00",' \
                   '"2022-03-14T19:00","2022-03-14T20:00","2022-03-14T21:00","2022-03-14T22:00","2022-03-14T23:00",' \
                   '"2022-03-15T00:00","2022-03-15T01:00","2022-03-15T02:00","2022-03-15T03:00","2022-03-15T04:00",' \
                   '"2022-03-15T05:00","2022-03-15T06:00","2022-03-15T07:00","2022-03-15T08:00","2022-03-15T09:00",' \
                   '"2022-03-15T10:00","2022-03-15T11:00","2022-03-15T12:00","2022-03-15T13:00","2022-03-15T14:00",' \
                   '"2022-03-15T15:00","2022-03-15T16:00","2022-03-15T17:00","2022-03-15T18:00","2022-03-15T19:00",' \
                   '"2022-03-15T20:00","2022-03-15T21:00","2022-03-15T22:00","2022-03-15T23:00","2022-03-16T00:00",' \
                   '"2022-03-16T01:00","2022-03-16T02:00","2022-03-16T03:00","2022-03-16T04:00","2022-03-16T05:00",' \
                   '"2022-03-16T06:00","2022-03-16T07:00","2022-03-16T08:00","2022-03-16T09:00","2022-03-16T10:00",' \
                   '"2022-03-16T11:00","2022-03-16T12:00","2022-03-16T13:00","2022-03-16T14:00","2022-03-16T15:00",' \
                   '"2022-03-16T16:00","2022-03-16T17:00","2022-03-16T18:00","2022-03-16T19:00","2022-03-16T20:00",' \
                   '"2022-03-16T21:00","2022-03-16T22:00","2022-03-16T23:00","2022-03-17T00:00","2022-03-17T01:00",' \
                   '"2022-03-17T02:00","2022-03-17T03:00","2022-03-17T04:00","2022-03-17T05:00","2022-03-17T06:00",' \
                   '"2022-03-17T07:00","2022-03-17T08:00","2022-03-17T09:00","2022-03-17T10:00","2022-03-17T11:00",' \
                   '"2022-03-17T12:00","2022-03-17T13:00","2022-03-17T14:00","2022-03-17T15:00","2022-03-17T16:00",' \
                   '"2022-03-17T17:00","2022-03-17T18:00","2022-03-17T19:00","2022-03-17T20:00","2022-03-17T21:00",' \
                   '"2022-03-17T22:00","2022-03-17T23:00","2022-03-18T00:00","2022-03-18T01:00","2022-03-18T02:00",' \
                   '"2022-03-18T03:00","2022-03-18T04:00","2022-03-18T05:00","2022-03-18T06:00","2022-03-18T07:00",' \
                   '"2022-03-18T08:00","2022-03-18T09:00","2022-03-18T10:00","2022-03-18T11:00","2022-03-18T12:00",' \
                   '"2022-03-18T13:00","2022-03-18T14:00","2022-03-18T15:00","2022-03-18T16:00","2022-03-18T17:00",' \
                   '"2022-03-18T18:00","2022-03-18T19:00","2022-03-18T20:00","2022-03-18T21:00","2022-03-18T22:00",' \
                   '"2022-03-18T23:00"],"temperature_2m":[7.4,7.4,7.4,7.4,6.9,7,6.7,6.6,6.4,6.8,7.6,9.2,9,9,8.3,8.1,' \
                   '8.1,8.1,8,7.6,7.6,7.8,7.8,7.7,7.8,7.9,7.9,7.9,7.9,7.9,8,8,8.3,9,10,10.4,11,11.5,11.7,11,10.2,9.6,' \
                   '8.6,7.7,7.1,6.7,6.3,6.3,6.3,6.3,6.2,6.2,6.1,6,5.7,5.5,5.9,6.7,7.9,9.2,10,10.7,11,11,10.9,10.5,' \
                   '9.8,8.4,7.1,6.1,5.7,5.3,4.6,3.9,3.3,2.9,2.5,2,2.4,2.6,3.3,4.7,8.2,10.2,10.5,11.1,11.1,11.1,11.1,' \
                   '10.7,10.1,9.6,8.9,8.2,7.8,7.6,7.3,7.1,6.9,6.7,6.8,6.8,7,7.1,7.2,7.6,8.1,8.9,9.5,9.5,9.1,8.5,7.9,' \
                   '7.3,6.6,6.3,6.1,5.8,5.4,4.8,4.1,3.6,3.2,2.7,2.4,2.2,2.2,2.6,3.3,4.4,5.6,7,8.3,9.1,9.7,10.1,10.1,' \
                   '10,9.4,8.5,7.4,6,5.4,5,4.6,4.5,4.4,3.9,2.6,0.9,-0.3,0.3,1.8,4.1,5.8,7.6,9.4,10.2,10.5,10.4,10.1,' \
                   '9.4,8.3,7.4,6.4,5.1,4.3,3.5]},"elevation":33.875,"utc_offset_seconds":0} '
        jsonObj = json.loads(jsondump)
        location = Location()
        self.assertEqual(location.getforecast(jsonObj), jsonObj['hourly'])

    #   test getweather method, takes in hourly data, builds up a dict and sends to a final method for output
    def test_getweather(self):
        jsondump = '{"hourly_units":{"time":"iso8601","temperature_2m":"°C"},"latitude":53.3125,"longitude":-6.25,' \
                   '"generationtime_ms":1.623988151550293,"hourly":{"time":["2022-03-12T00:00","2022-03-12T01:00",' \
                   '"2022-03-12T02:00","2022-03-12T03:00","2022-03-12T04:00","2022-03-12T05:00","2022-03-12T06:00",' \
                   '"2022-03-12T07:00","2022-03-12T08:00","2022-03-12T09:00","2022-03-12T10:00","2022-03-12T11:00",' \
                   '"2022-03-12T12:00","2022-03-12T13:00","2022-03-12T14:00","2022-03-12T15:00","2022-03-12T16:00",' \
                   '"2022-03-12T17:00","2022-03-12T18:00","2022-03-12T19:00","2022-03-12T20:00","2022-03-12T21:00",' \
                   '"2022-03-12T22:00","2022-03-12T23:00","2022-03-13T00:00","2022-03-13T01:00","2022-03-13T02:00",' \
                   '"2022-03-13T03:00","2022-03-13T04:00","2022-03-13T05:00","2022-03-13T06:00","2022-03-13T07:00",' \
                   '"2022-03-13T08:00","2022-03-13T09:00","2022-03-13T10:00","2022-03-13T11:00","2022-03-13T12:00",' \
                   '"2022-03-13T13:00","2022-03-13T14:00","2022-03-13T15:00","2022-03-13T16:00","2022-03-13T17:00",' \
                   '"2022-03-13T18:00","2022-03-13T19:00","2022-03-13T20:00","2022-03-13T21:00","2022-03-13T22:00",' \
                   '"2022-03-13T23:00","2022-03-14T00:00","2022-03-14T01:00","2022-03-14T02:00","2022-03-14T03:00",' \
                   '"2022-03-14T04:00","2022-03-14T05:00","2022-03-14T06:00","2022-03-14T07:00","2022-03-14T08:00",' \
                   '"2022-03-14T09:00","2022-03-14T10:00","2022-03-14T11:00","2022-03-14T12:00","2022-03-14T13:00",' \
                   '"2022-03-14T14:00","2022-03-14T15:00","2022-03-14T16:00","2022-03-14T17:00","2022-03-14T18:00",' \
                   '"2022-03-14T19:00","2022-03-14T20:00","2022-03-14T21:00","2022-03-14T22:00","2022-03-14T23:00",' \
                   '"2022-03-15T00:00","2022-03-15T01:00","2022-03-15T02:00","2022-03-15T03:00","2022-03-15T04:00",' \
                   '"2022-03-15T05:00","2022-03-15T06:00","2022-03-15T07:00","2022-03-15T08:00","2022-03-15T09:00",' \
                   '"2022-03-15T10:00","2022-03-15T11:00","2022-03-15T12:00","2022-03-15T13:00","2022-03-15T14:00",' \
                   '"2022-03-15T15:00","2022-03-15T16:00","2022-03-15T17:00","2022-03-15T18:00","2022-03-15T19:00",' \
                   '"2022-03-15T20:00","2022-03-15T21:00","2022-03-15T22:00","2022-03-15T23:00","2022-03-16T00:00",' \
                   '"2022-03-16T01:00","2022-03-16T02:00","2022-03-16T03:00","2022-03-16T04:00","2022-03-16T05:00",' \
                   '"2022-03-16T06:00","2022-03-16T07:00","2022-03-16T08:00","2022-03-16T09:00","2022-03-16T10:00",' \
                   '"2022-03-16T11:00","2022-03-16T12:00","2022-03-16T13:00","2022-03-16T14:00","2022-03-16T15:00",' \
                   '"2022-03-16T16:00","2022-03-16T17:00","2022-03-16T18:00","2022-03-16T19:00","2022-03-16T20:00",' \
                   '"2022-03-16T21:00","2022-03-16T22:00","2022-03-16T23:00","2022-03-17T00:00","2022-03-17T01:00",' \
                   '"2022-03-17T02:00","2022-03-17T03:00","2022-03-17T04:00","2022-03-17T05:00","2022-03-17T06:00",' \
                   '"2022-03-17T07:00","2022-03-17T08:00","2022-03-17T09:00","2022-03-17T10:00","2022-03-17T11:00",' \
                   '"2022-03-17T12:00","2022-03-17T13:00","2022-03-17T14:00","2022-03-17T15:00","2022-03-17T16:00",' \
                   '"2022-03-17T17:00","2022-03-17T18:00","2022-03-17T19:00","2022-03-17T20:00","2022-03-17T21:00",' \
                   '"2022-03-17T22:00","2022-03-17T23:00","2022-03-18T00:00","2022-03-18T01:00","2022-03-18T02:00",' \
                   '"2022-03-18T03:00","2022-03-18T04:00","2022-03-18T05:00","2022-03-18T06:00","2022-03-18T07:00",' \
                   '"2022-03-18T08:00","2022-03-18T09:00","2022-03-18T10:00","2022-03-18T11:00","2022-03-18T12:00",' \
                   '"2022-03-18T13:00","2022-03-18T14:00","2022-03-18T15:00","2022-03-18T16:00","2022-03-18T17:00",' \
                   '"2022-03-18T18:00","2022-03-18T19:00","2022-03-18T20:00","2022-03-18T21:00","2022-03-18T22:00",' \
                   '"2022-03-18T23:00"],"temperature_2m":[7.4,7.4,7.4,7.4,6.9,7,6.7,6.6,6.4,6.8,7.6,9.2,9,9,8.3,8.1,' \
                   '8.1,8.1,8,7.6,7.6,7.8,7.8,7.7,7.8,7.9,7.9,7.9,7.9,7.9,8,8,8.3,9,10,10.4,11,11.5,11.7,11,10.2,9.6,' \
                   '8.6,7.7,7.1,6.7,6.3,6.3,6.3,6.3,6.2,6.2,6.1,6,5.7,5.5,5.9,6.7,7.9,9.2,10,10.7,11,11,10.9,10.5,' \
                   '9.8,8.4,7.1,6.1,5.7,5.3,4.6,3.9,3.3,2.9,2.5,2,2.4,2.6,3.3,4.7,8.2,10.2,10.5,11.1,11.1,11.1,11.1,' \
                   '10.7,10.1,9.6,8.9,8.2,7.8,7.6,7.3,7.1,6.9,6.7,6.8,6.8,7,7.1,7.2,7.6,8.1,8.9,9.5,9.5,9.1,8.5,7.9,' \
                   '7.3,6.6,6.3,6.1,5.8,5.4,4.8,4.1,3.6,3.2,2.7,2.4,2.2,2.2,2.6,3.3,4.4,5.6,7,8.3,9.1,9.7,10.1,10.1,' \
                   '10,9.4,8.5,7.4,6,5.4,5,4.6,4.5,4.4,3.9,2.6,0.9,-0.3,0.3,1.8,4.1,5.8,7.6,9.4,10.2,10.5,10.4,10.1,' \
                   '9.4,8.3,7.4,6.4,5.1,4.3,3.5]},"elevation":33.875,"utc_offset_seconds":0} '

        jsonObj = json.loads(jsondump)

        location = Location()
        location.getweather(jsonObj['hourly'])

        self.assertTrue(location.forecastdict is not None)


if __name__ == '__main__':
    unittest.main()
